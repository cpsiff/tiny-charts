{"version":3,"sources":["chart.js","slider.js","App.js","reportWebVitals.js","index.js"],"names":["toMillions","val","Math","round","toString","shortenYear","slice","Chart","data","width","BarChart","id","height","margin","top","right","left","bottom","barCategoryGap","XAxis","dataKey","tick","YAxis","tickFormatter","Tooltip","Bar","stackId","fill","name","CartesianGrid","strokeDasharray","vertical","interval","label","value","position","offset","angle","Legend","LabelList","formatter","Slider","onChange","ReactSlider","max","min","className","thumbClassName","trackClassName","renderThumb","props","state","valueNow","onSliderChange","console","log","ReactDOM","render","document","getElementById","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"6RA6SA,SAASA,EAAWC,GAChB,OAAQC,KAAKC,MAAMF,EAAI,KAAO,KAAKG,WAAa,IAGpD,SAASC,EAAYJ,GACjB,MAAO,IAAMA,EAAIG,WAAWE,OAAO,GAGxBC,MApTD,SAAC,GAAuB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAySpB,OAnSSA,EAAQ,IAEb,eAACC,EAAA,EAAD,CAAUC,GAAG,QACTF,MAAOA,EACPG,OAAQH,EAAM,EACdD,KAAMA,EACNK,OAAQ,CACJC,IAAK,EACLC,MAAO,EACPC,KAAM,EACNC,OAAQ,GAEZC,gBAAiB,EAVrB,UAYI,cAACC,EAAA,EAAD,CACIC,QAAQ,OACRC,MAAM,EACNT,OAAQ,IAEZ,cAACU,EAAA,EAAD,CACIC,cAAevB,EACfqB,MAAM,EACNZ,MAAO,IAEX,cAACe,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAKL,QAAQ,WAAWM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAExD,cAACH,EAAA,EAAD,CAAKL,QAAQ,aAAaM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,eAE1D,cAACH,EAAA,EAAD,CAAKL,QAAQ,QAAQM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAKpDnB,EAAQ,IAEb,eAACC,EAAA,EAAD,CAAUC,GAAG,QACTF,MAAOA,EACPG,OAAQH,EAAM,EACdD,KAAMA,EACNK,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,MAAO,GACPC,OAAQ,GAEZC,gBAAiB,EAVrB,UAYI,cAACW,EAAA,EAAD,CAAeC,gBAAgB,MAAMC,UAAU,IAC/C,cAACZ,EAAA,EAAD,CACIC,QAAQ,OACRG,cAAelB,EACf2B,SAAU,EACVC,MAAO,CACHC,MAAO,OACPC,SAAU,SACVC,QAAS,MAGjB,cAACd,EAAA,EAAD,CACIW,MAAO,CACHC,MAAO,QACPG,OAAQ,GACRF,SAAU,eAEdZ,cAAevB,EACfqB,MAAM,EACNZ,MAAO,KAEX,cAACe,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAKL,QAAQ,WAAWM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAExD,cAACH,EAAA,EAAD,CAAKL,QAAQ,aAAaM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,eAE1D,cAACH,EAAA,EAAD,CAAKL,QAAQ,QAAQM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAKpDnB,EAAQ,IAEb,eAACC,EAAA,EAAD,CAAUC,GAAG,QACTF,MAAOA,EACPG,OAAQH,EAAM,EACdD,KAAMA,EACNK,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GAEZC,gBAAiB,EAVrB,UAYI,cAACW,EAAA,EAAD,CAAeC,gBAAgB,MAAMC,UAAU,IAC/C,cAACZ,EAAA,EAAD,CACIC,QAAQ,OACRG,cAAelB,EACf2B,SAAU,EACVC,MAAO,CACHC,MAAO,OACPC,SAAU,SACVC,QAAS,MAGjB,cAACd,EAAA,EAAD,CACIW,MAAO,CACHC,MAAO,QACPG,OAAQ,GACRF,SAAU,eAEdZ,cAAevB,EACfgC,SAAU,IAEd,cAACR,EAAA,EAAD,IACA,cAACc,EAAA,EAAD,IACA,cAACb,EAAA,EAAD,CAAKL,QAAQ,WAAWM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAExD,cAACH,EAAA,EAAD,CAAKL,QAAQ,aAAaM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,eAE1D,cAACH,EAAA,EAAD,CAAKL,QAAQ,QAAQM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAIpDnB,EAAQ,IAEb,eAACC,EAAA,EAAD,CAAUC,GAAG,QACTF,MAAOA,EACPG,OAAQH,EAAM,EACdD,KAAMA,EACNK,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARhB,UAWI,cAACY,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACX,EAAA,EAAD,CACIC,QAAQ,OACRG,cAAelB,IAGnB,cAACiB,EAAA,EAAD,CACIW,MAAO,CACHC,MAAO,QACPG,OAAQ,GACRF,SAAU,OACVC,OAAQ,GAEZb,cAAevB,IAEnB,cAACwB,EAAA,EAAD,IACA,cAACc,EAAA,EAAD,IACA,cAACb,EAAA,EAAD,CAAKL,QAAQ,WAAWM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAExD,cAACH,EAAA,EAAD,CAAKL,QAAQ,aAAaM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,eAE1D,cAACH,EAAA,EAAD,CAAKL,QAAQ,QAAQM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAIpDnB,EAAQ,IAEb,eAACC,EAAA,EAAD,CAAUC,GAAG,QACTF,MAAOA,EACPG,OAAQH,EAAM,EACdD,KAAMA,EACNK,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARhB,UAWI,cAACY,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACX,EAAA,EAAD,CACIC,QAAQ,OACRG,cAAelB,EACf4B,MAAO,CACHC,MAAO,OACPC,SAAU,SACVC,QAAS,IAEbxB,OAAQ,KAEZ,cAACU,EAAA,EAAD,CACIW,MAAO,CACHC,MAAO,QACPG,OAAQ,GACRF,SAAU,OACVC,OAAQ,GAEZb,cAAevB,IAEnB,cAACwB,EAAA,EAAD,IACA,cAACc,EAAA,EAAD,IACA,cAACb,EAAA,EAAD,CAAKL,QAAQ,WAAWM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAExD,cAACH,EAAA,EAAD,CAAKL,QAAQ,aAAaM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,eAE1D,cAACH,EAAA,EAAD,CAAKL,QAAQ,QAAQM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAIpDnB,EAAQ,IAEb,eAACC,EAAA,EAAD,CAAUC,GAAG,QACTF,MAAOA,EACPG,OAAQH,EAAM,EACdD,KAAMA,EACNK,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARhB,UAWI,cAACY,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACX,EAAA,EAAD,CACIC,QAAQ,OACRa,MAAO,CACHC,MAAO,OACPC,SAAU,SACVC,QAAS,IAEbxB,OAAQ,KAEZ,cAACU,EAAA,EAAD,CACIW,MAAO,CACHC,MAAO,QACPG,OAAQ,GACRF,SAAU,OACVC,OAAQ,GAEZb,cAAevB,IAEnB,cAACwB,EAAA,EAAD,IACA,cAACc,EAAA,EAAD,IACA,cAACb,EAAA,EAAD,CAAKL,QAAQ,WAAWM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAExD,cAACH,EAAA,EAAD,CAAKL,QAAQ,aAAaM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,eAE1D,cAACH,EAAA,EAAD,CAAKL,QAAQ,QAAQM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAMzD,eAAClB,EAAA,EAAD,CAAUC,GAAG,QACTF,MAAOA,EACPG,OAAQH,EAAM,EACdD,KAAMA,EACNK,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARhB,UAWI,cAACY,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACX,EAAA,EAAD,CACIC,QAAQ,OACRa,MAAO,CACHC,MAAO,OACPC,SAAU,SACVC,QAAS,IAEbxB,OAAQ,KAEZ,cAACU,EAAA,EAAD,CACIW,MAAO,CACHC,MAAO,QACPG,OAAQ,GACRF,SAAU,OACVC,OAAQ,GAEZb,cAAevB,IAEnB,cAACwB,EAAA,EAAD,IACA,cAACc,EAAA,EAAD,IACA,cAACb,EAAA,EAAD,CAAKL,QAAQ,WAAWM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,WAAxD,SACI,cAACW,EAAA,EAAD,CAAWnB,QAAQ,WAAWe,SAAS,eAAeK,UAAWxC,MAErE,cAACyB,EAAA,EAAD,CAAKL,QAAQ,aAAaM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,aAA1D,SACI,cAACW,EAAA,EAAD,CAAWnB,QAAQ,aAAae,SAAS,eAAeK,UAAWxC,MAEvE,cAACyB,EAAA,EAAD,CAAKL,QAAQ,QAAQM,QAAQ,IAAIC,KAAK,UAAUC,KAAK,QAArD,SACI,cAACW,EAAA,EAAD,CAAWnB,QAAQ,QAAQe,SAAS,MAAMK,UAAWxC,U,kBCxRtDyC,EAbA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,cAACC,EAAA,EAAD,CACIC,IAAK,IACLC,IAAK,GACLC,UAAU,oBACVC,eAAe,gBACfC,eAAe,gBACfN,SAAUA,EACVO,YAAa,SAACC,EAAOC,GAAR,OAAkB,+CAASD,GAAT,aAAiBC,EAAMC,gBCLxD5C,EAAO,CACX,CACI,KAAQ,KACR,SAAY,QACZ,WAAc,QACd,MAAS,OAEb,CACI,KAAQ,KACR,SAAY,OACZ,WAAc,QACd,MAAS,QAEb,CACI,KAAQ,KACR,SAAY,OACZ,WAAc,QACd,MAAS,OAEb,CACI,KAAQ,KACR,SAAY,QACZ,WAAc,QACd,MAAS,OAEb,CACI,KAAQ,KACR,SAAY,QACZ,WAAc,OACd,MAAS,QAEb,CACI,KAAQ,KACR,SAAY,QACZ,WAAc,OACd,MAAS,QAEb,CACI,KAAQ,IACR,SAAY,QACZ,WAAc,QACd,MAAS,QAEb,CACI,KAAQ,KACR,SAAY,QACZ,WAAc,QACd,MAAS,OAEb,CACI,KAAQ,KACR,SAAY,QACZ,WAAc,QACd,MAAS,OAEb,CACI,KAAQ,KACR,SAAY,QACZ,WAAc,QACd,MAAS,OAEb,CACI,KAAQ,KACR,SAAY,QACZ,WAAc,QACd,MAAS,SAMf,SAAS6C,EAAenB,GACtBoB,QAAQC,IAAI,kBAAoBrB,GACpBA,EACZsB,IAASC,OACP,cAAC,EAAD,CACEjD,KAAMA,EACNC,MAAOyB,IAETwB,SAASC,eAAe,aAgBbC,MAZf,WACE,OACE,gCACE,cAAC,EAAD,CACElB,SAAUW,IAEZ,qBAAK1C,GAAG,iBClFCkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdN,IAASC,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASC,eAAe,SAM1BE,M","file":"static/js/main.f78e07fc.chunk.js","sourcesContent":["import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LabelList, Customized } from 'recharts';\nconst Chart = ( { data, width } ) => {\n    var chart;\n\n    if(false){\n\n    }\n    else if (width < 230){\n        chart =\n        <BarChart id=\"chart\"\n            width={width}\n            height={width/2}\n            data={data}\n            margin={{\n                top: 5,\n                right: 5,\n                left: 5,\n                bottom: 5,\n            }}\n            barCategoryGap={-1}\n            >\n            <XAxis\n                dataKey=\"name\"\n                tick={false}\n                height={0}\n            />\n            <YAxis\n                tickFormatter={toMillions}\n                tick={false}\n                width={0}\n            />\n            <Tooltip />\n            <Bar dataKey=\"democrat\" stackId=\"a\" fill=\"#377eb8\" name=\"Democrat\">\n            </Bar>\n            <Bar dataKey=\"republican\" stackId=\"a\" fill=\"#e41a1c\" name=\"Republican\">\n            </Bar>\n            <Bar dataKey=\"other\" stackId=\"a\" fill=\"#e0cf1a\" name=\"Other\">\n            </Bar>\n        </BarChart>\n    }\n\n    else if (width < 330){\n        chart =\n        <BarChart id=\"chart\"\n            width={width}\n            height={width/2}\n            data={data}\n            margin={{\n                top: 20,\n                right: 30,\n                left: -10,\n                bottom: 5,\n            }}\n            barCategoryGap={-1}\n            >\n            <CartesianGrid strokeDasharray=\"3 3\" vertical={false}/>\n            <XAxis\n                dataKey=\"name\"\n                tickFormatter={shortenYear}\n                interval={9}\n                label={{\n                    value: 'Year',\n                    position: 'bottom',\n                    offset: -18\n                }}\n            />\n            <YAxis \n                label={{\n                    value: 'Votes',\n                    angle: -90,\n                    position: 'outsideLeft'\n                }}\n                tickFormatter={toMillions}\n                tick={false}\n                width={50}\n            />\n            <Tooltip />\n            <Bar dataKey=\"democrat\" stackId=\"a\" fill=\"#377eb8\" name=\"Democrat\">\n            </Bar>\n            <Bar dataKey=\"republican\" stackId=\"a\" fill=\"#e41a1c\" name=\"Republican\">\n            </Bar>\n            <Bar dataKey=\"other\" stackId=\"a\" fill=\"#e0cf1a\" name=\"Other\">\n            </Bar>\n        </BarChart>\n    }\n\n    else if (width < 420){\n        chart =\n        <BarChart id=\"chart\"\n            width={width}\n            height={width/2}\n            data={data}\n            margin={{\n                top: 20,\n                right: 30,\n                left: 0,\n                bottom: 5,\n            }}\n            barCategoryGap={-1}\n            >\n            <CartesianGrid strokeDasharray=\"3 3\" vertical={false}/>\n            <XAxis\n                dataKey=\"name\"\n                tickFormatter={shortenYear}\n                interval={9}\n                label={{\n                    value: 'Year',\n                    position: 'bottom',\n                    offset: -18\n                }}\n            />\n            <YAxis \n                label={{\n                    value: 'Votes',\n                    angle: -90,\n                    position: 'outsideLeft'\n                }}\n                tickFormatter={toMillions}\n                interval={3}\n            />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"democrat\" stackId=\"a\" fill=\"#377eb8\" name=\"Democrat\">\n            </Bar>\n            <Bar dataKey=\"republican\" stackId=\"a\" fill=\"#e41a1c\" name=\"Republican\">\n            </Bar>\n            <Bar dataKey=\"other\" stackId=\"a\" fill=\"#e0cf1a\" name=\"Other\">\n            </Bar>\n        </BarChart>\n    }\n    else if (width < 520){\n        chart =\n        <BarChart id=\"chart\"\n            width={width}\n            height={width/2}\n            data={data}\n            margin={{\n                top: 20,\n                right: 30,\n                left: 20,\n                bottom: 5,\n            }}\n            >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n                dataKey=\"name\"\n                tickFormatter={shortenYear}\n\n            />\n            <YAxis \n                label={{\n                    value: 'Votes',\n                    angle: -90,\n                    position: 'left',\n                    offset: 0\n                }}\n                tickFormatter={toMillions}\n            />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"democrat\" stackId=\"a\" fill=\"#377eb8\" name=\"Democrat\">\n            </Bar>\n            <Bar dataKey=\"republican\" stackId=\"a\" fill=\"#e41a1c\" name=\"Republican\">\n            </Bar>\n            <Bar dataKey=\"other\" stackId=\"a\" fill=\"#e0cf1a\" name=\"Other\">\n            </Bar>\n        </BarChart>\n    }\n    else if (width < 580){\n        chart =\n        <BarChart id=\"chart\"\n            width={width}\n            height={width/2}\n            data={data}\n            margin={{\n                top: 20,\n                right: 30,\n                left: 20,\n                bottom: 5,\n            }}\n            >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n                dataKey=\"name\"\n                tickFormatter={shortenYear}\n                label={{\n                    value: 'Year',\n                    position: 'bottom',\n                    offset: -20\n                }}\n                height={50}\n            />\n            <YAxis \n                label={{\n                    value: 'Votes',\n                    angle: -90,\n                    position: 'left',\n                    offset: 0\n                }}\n                tickFormatter={toMillions}\n            />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"democrat\" stackId=\"a\" fill=\"#377eb8\" name=\"Democrat\">\n            </Bar>\n            <Bar dataKey=\"republican\" stackId=\"a\" fill=\"#e41a1c\" name=\"Republican\">\n            </Bar>\n            <Bar dataKey=\"other\" stackId=\"a\" fill=\"#e0cf1a\" name=\"Other\">\n            </Bar>\n        </BarChart>\n    }\n    else if (width < 750){\n        chart =\n        <BarChart id=\"chart\"\n            width={width}\n            height={width/2}\n            data={data}\n            margin={{\n                top: 20,\n                right: 30,\n                left: 20,\n                bottom: 5,\n            }}\n            >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n                dataKey=\"name\"\n                label={{\n                    value: 'Year',\n                    position: 'bottom',\n                    offset: -20\n                }}\n                height={50}\n            />\n            <YAxis \n                label={{\n                    value: 'Votes',\n                    angle: -90,\n                    position: 'left',\n                    offset: 0\n                }}\n                tickFormatter={toMillions}\n            />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"democrat\" stackId=\"a\" fill=\"#377eb8\" name=\"Democrat\">\n            </Bar>\n            <Bar dataKey=\"republican\" stackId=\"a\" fill=\"#e41a1c\" name=\"Republican\">\n            </Bar>\n            <Bar dataKey=\"other\" stackId=\"a\" fill=\"#e0cf1a\" name=\"Other\">\n            </Bar>\n        </BarChart>\n    }\n    else{\n        chart =\n        <BarChart id=\"chart\"\n            width={width}\n            height={width/2}\n            data={data}\n            margin={{\n                top: 20,\n                right: 30,\n                left: 20,\n                bottom: 5,\n            }}\n            >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n                dataKey=\"name\"\n                label={{\n                    value: 'Year',\n                    position: 'bottom',\n                    offset: -20\n                }}\n                height={50}\n            />\n            <YAxis \n                label={{\n                    value: 'Votes',\n                    angle: -90,\n                    position: 'left',\n                    offset: 0\n                }}\n                tickFormatter={toMillions}\n            />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"democrat\" stackId=\"a\" fill=\"#377eb8\" name=\"Democrat\">\n                <LabelList dataKey=\"democrat\" position=\"insideMiddle\" formatter={toMillions}/>\n            </Bar>\n            <Bar dataKey=\"republican\" stackId=\"a\" fill=\"#e41a1c\" name=\"Republican\">\n                <LabelList dataKey=\"republican\" position=\"insideMiddle\" formatter={toMillions}/>\n            </Bar>\n            <Bar dataKey=\"other\" stackId=\"a\" fill=\"#e0cf1a\" name=\"Other\">\n                <LabelList dataKey=\"other\" position=\"top\" formatter={toMillions}/>\n            </Bar>\n        </BarChart>\n    }\n    return(chart);\n};\n\nfunction toMillions(val){\n    return((Math.round(val/10000)/100).toString() + \"M\");\n}\n\nfunction shortenYear(val){\n    return(\"'\" + val.toString().slice(-2));\n}\n\nexport default Chart;","import ReactSlider from \"react-slider\";\nconst Slider = ({ onChange }) => {\n  return (\n    <ReactSlider\n        max={1000}\n        min={50}\n        className=\"horizontal-slider\"\n        thumbClassName=\"example-thumb\"\n        trackClassName=\"example-track\"\n        onChange={onChange}\n        renderThumb={(props, state) => <div {...props}>{state.valueNow}</div>}\n    />\n  );\n};\nexport default Slider;","import './App.css';\nimport Chart from './chart';\nimport Slider from \"./slider\";\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  {\n      \"name\": 1976,\n      \"democrat\": 1040232,\n      \"republican\": 1004987,\n      \"other\": 56117\n  },\n  {\n      \"name\": 1980,\n      \"democrat\": 981584,\n      \"republican\": 1088845,\n      \"other\": 202792\n  },\n  {\n      \"name\": 1984,\n      \"democrat\": 995740,\n      \"republican\": 1198584,\n      \"other\": 17365\n  },\n  {\n      \"name\": 1988,\n      \"democrat\": 1126794,\n      \"republican\": 1047499,\n      \"other\": 17315\n  },\n  {\n      \"name\": 1992,\n      \"democrat\": 1041066,\n      \"republican\": 930855,\n      \"other\": 559143\n  },\n  {\n      \"name\": 1996,\n      \"democrat\": 1071971,\n      \"republican\": 845029,\n      \"other\": 279169\n  },\n  {\n      \"name\": 2000,\n      \"democrat\": 1242987,\n      \"republican\": 1237279,\n      \"other\": 118341\n  },\n  {\n      \"name\": 2004,\n      \"democrat\": 1489504,\n      \"republican\": 1478120,\n      \"other\": 29383\n  },\n  {\n      \"name\": 2008,\n      \"democrat\": 1677211,\n      \"republican\": 1262393,\n      \"other\": 43813\n  },\n  {\n      \"name\": 2012,\n      \"democrat\": 1620985,\n      \"republican\": 1410966,\n      \"other\": 39483\n  },\n  {\n      \"name\": 2016,\n      \"democrat\": 1382536,\n      \"republican\": 1405284,\n      \"other\": 188330\n  }\n];\n\nvar sliderVal;\n\nfunction onSliderChange(value){\n  console.log(\"slider changed \" + value);\n  sliderVal = value;\n  ReactDOM.render(\n    <Chart\n      data={data}\n      width={value}\n    />,\n    document.getElementById('chartdiv')\n  )\n}\n\nfunction App() {\n  return (\n    <div>\n      <Slider \n        onChange={onSliderChange}\n      />\n      <div id='chartdiv'>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}